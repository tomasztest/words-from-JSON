{"version":3,"sources":["components/Word.js","components/App.js","serviceWorker.js","index.js"],"names":["Word","props","react_default","a","createElement","english","polish","App","state","words","isLoaded","fetchData","fetch","then","response","json","data","_this","setState","setTimeout","this","map","word","src_components_Word","key","id","en","pl","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAUeA,eAPF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,2BACgBF,EAAAC,EAAAC,cAAA,cAASH,EAAMI,SAD/B,eAEEH,EAAAC,EAAAC,cAAA,kBAAUH,EAAMK,WCiCLC,6MAlCbC,MAAQ,CACNC,MAAO,GACPC,UAAU,KAOZC,UAAY,WACVC,MAAM,mBACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,EAAKC,SAAS,CACZT,MAAOO,EAAKP,MACZC,UAAU,0FAThBS,WAAWC,KAAKT,UAAW,sCAe3B,IAAMF,EAAQW,KAAKZ,MAAMC,MAAMY,IAAI,SAAAC,GAAI,OACrCpB,EAAAC,EAAAC,cAACmB,EAAD,CAAMC,IAAKF,EAAKG,GAAIpB,QAASiB,EAAKI,GAAIpB,OAAQgB,EAAKK,OAErD,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAChB1B,EAAAC,EAAAC,cAAA,UAAKgB,KAAKZ,MAAME,SAAWD,EAAQ,0BA5B3BoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.56554b9c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Word.css\";\r\n\r\nconst Word = props => (\r\n  <li>\r\n    Po ANGIELSKU: <strong>{props.english}</strong>. Po POLSKU:\r\n    <strong> {props.polish}</strong>\r\n  </li>\r\n);\r\n\r\nexport default Word;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Word from \"./Word\";\n\nclass App extends Component {\n  state = {\n    words: [],\n    isLoaded: false\n  };\n\n  componentDidMount() {\n    setTimeout(this.fetchData, 2000);\n  }\n\n  fetchData = () => {\n    fetch(\"data/words.json\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          words: data.words,\n          isLoaded: true\n        });\n      });\n  };\n\n  render() {\n    const words = this.state.words.map(word => (\n      <Word key={word.id} english={word.en} polish={word.pl} />\n    ));\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ul>{this.state.isLoaded ? words : \"wczytuje dane\"}</ul>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}